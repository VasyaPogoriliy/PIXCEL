//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\HP\source\repos\c#\Laba1_Spreadsheet\Laba1_Spreadsheet\Calc.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Laba1_Spreadsheet {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="CalcParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface ICalcListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpr([NotNull] CalcParser.ParenthesizedExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpr([NotNull] CalcParser.ParenthesizedExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>UnarMinusExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnarMinusExpr([NotNull] CalcParser.UnarMinusExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnarMinusExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnarMinusExpr([NotNull] CalcParser.UnarMinusExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>UnarPlusExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnarPlusExpr([NotNull] CalcParser.UnarPlusExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnarPlusExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnarPlusExpr([NotNull] CalcParser.UnarPlusExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ExponentialExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExponentialExpr([NotNull] CalcParser.ExponentialExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExponentialExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExponentialExpr([NotNull] CalcParser.ExponentialExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplicativeExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpr([NotNull] CalcParser.MultiplicativeExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplicativeExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpr([NotNull] CalcParser.MultiplicativeExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>AdditiveExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpr([NotNull] CalcParser.AdditiveExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditiveExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpr([NotNull] CalcParser.AdditiveExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>NumberExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberExpr([NotNull] CalcParser.NumberExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NumberExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberExpr([NotNull] CalcParser.NumberExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpr([NotNull] CalcParser.IdentifierExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpr([NotNull] CalcParser.IdentifierExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MaxMinExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMaxMinExpr([NotNull] CalcParser.MaxMinExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MaxMinExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMaxMinExpr([NotNull] CalcParser.MaxMinExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MmaxMminExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMmaxMminExpr([NotNull] CalcParser.MmaxMminExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MmaxMminExpr</c>
	/// labeled alternative in <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMmaxMminExpr([NotNull] CalcParser.MmaxMminExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CalcParser.compileUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompileUnit([NotNull] CalcParser.CompileUnitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalcParser.compileUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompileUnit([NotNull] CalcParser.CompileUnitContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] CalcParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalcParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] CalcParser.ExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CalcParser.arglist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArglist([NotNull] CalcParser.ArglistContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalcParser.arglist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArglist([NotNull] CalcParser.ArglistContext context);
}
} // namespace Laba1_Spreadsheet
